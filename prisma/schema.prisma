
generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  refresh_token_expires_in Int?  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  role    Role     @default(USER)
   posts   Post[]
  profile Profile?
  @@map("users")
}

model Profile {
  id     String    @id @default(cuid())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String    @unique
}

model Post {
  id         String        @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  categories Category[]
}

model Category {
  id    String    @id @default(cuid())
  name  String
  posts Post[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
}

model Rabbit {
  id            String    @id @default(cuid())
  name          String
  condition     String
  age           String
  images        String[]
  weight        String
  gender        String
  neutered      String
  character     String
  location      String
  date          String
  ect           String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@map("rabbits")
}